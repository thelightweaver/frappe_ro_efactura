{"Implementation approach":"Vom folosi arhitectură modulară bazată pe extensii Frappe, integrând biblioteci Python open-source pentru componente critice. Se va extinde modelul Sales Invoice cu câmpuri specifice ANAF și se va implementa un sistem de cozi pentru retrimiteri automate. Pentru validare XML vom utiliza lxml cu scheme Schematron, iar pentru semnătura digitală xmlsec cu suport eIDAS. Autentificarea se va face prin OAuth2 sau certificat client, cu stocare securizată în baza de date criptată a Frappe.","File list":["frappe_ro_efactura/__init__.py","frappe_ro_efactura/efactura.py","frappe_ro_efactura/xml_generator.py","frappe_ro_efactura/anaf_client.py","frappe_ro_efactura/doctype/efactura_transaction/efactura_transaction.py","frappe_ro_efactura/doctype/efactura_settings/efactura_settings.py","frappe_ro_efactura/templates/integration_button.html","frappe_ro_efactura/hooks.py"],"Data structures and interfaces":"\nclassDiagram\n    class SalesInvoice {\n        +customer: str\n        +items: list[Item]\n        +taxes: list[Tax]\n        +add_einvoice_metadata()\n        +validate_anaf_compliance()\n    }\n    class EFacturaTransaction {\n        +invoice_link: str\n        +status: str\n        +xml_data: str\n        +anaf_response: dict\n        +submit_to_anaf()\n        +retry_failed()\n        +generate_pdf()\n    }\n    class XMLGenerator {\n        +template: str\n        +generate_ubl_21(invoice: SalesInvoice) str\n        +validate_with_schematron(xml: str) bool\n    }\n    class DigitalSigner {\n        +certificate: bytes\n        +private_key: bytes\n        +sign_xml(xml: str) str\n    }\n    class ANAFClient {\n        +api_url: str\n        +auth_type: str\n        +send_xml(xml: str) dict\n        +check_status(uuid: str) dict\n    }\n    class EFacturaSettings {\n        +environment: str\n        +auth_method: str\n        +certificate: SecureField\n        +configure_connection()\n    }\n    SalesInvoice --> EFacturaTransaction\n    EFacturaTransaction --> XMLGenerator\n    EFacturaTransaction --> DigitalSigner\n    EFacturaTransaction --> ANAFClient\n    ANAFClient --> EFacturaSettings\n","Program call flow":"\nsequenceDiagram\n    participant SI as SalesInvoice\n    participant EFT as EFacturaTransaction\n    participant XMLG as XMLGenerator\n    participant DS as DigitalSigner\n    participant ANAF as ANAFClient\n    participant Settings as EFacturaSettings\n    SI->>EFT: submit_to_anaf()\n    EFT->>SI: validate_anaf_compliance()\n    EFT->>XMLG: generate_ubl_21(SI)\n    XMLG-->>EFT: XML\n    EFT->>DS: sign_xml(XML)\n    DS-->>EFT: SignedXML\n    EFT->>ANAF: send_xml(SignedXML)\n    Settings->>ANAF: configure_connection()\n    ANAF-->>EFT: {status, uuid}\n    loop Retry failed\n        EFT->>ANAF: check_status(uuid)\n        ANAF-->>EFT: new_status\n    end\n    EFT->>EFT: update_status()\n    EFT->>XMLG: generate_pdf()\n","Anything UNCLEAR":"1. Detalii implementare OAuth2: Necesită verificare documentație oficială ANAF pentru flux autorizare\n2. Stocare certificat: Propunem utilizarea câmpurilor criptate din Frappe + restricții acces\n3. Validare semnătură test: Cerem detalii ANAF despre certificații de test acceptați și reguli de validare specifice"}